name: Savant Smart Contract Analyzer
# 
# Required secrets:
#   - SAVANT_API_TOKEN: API token for Savant.Chat (get from https://savant.chat -> Profile -> Settings -> API Keys)
# 
# Optional secrets:
#   - SAVANT_NOTIFICATION_CONTACTS: Default notification contacts (comma-separated emails, Telegram usernames, or chat IDs)
#                                    These contacts will always receive notifications, regardless of trigger type.
#                                    Example: 'devops@company.com, @telegram_devops, 123456789'
#
on:
  # Manual trigger with inputs
  workflow_dispatch:
    inputs:
      base_commit:
        description: 'Base commit SHA for comparison'
        required: true
      head_commit:
        description: 'Head commit SHA for comparison'
        required: true
        default: 'HEAD'
      dry_run:
        description: 'Dry run mode'
        required: false
        default: 'false'
        type: boolean
      tier:
        description: 'Audit tier'
        required: false
        default: 'pro'
        type: choice
        options:
          - pro
          - advanced
          - lite
      notification_contacts:
        description: 'Additional notification contacts (comma-separated emails and Telegram usernames). Will be combined with SAVANT_NOTIFICATION_CONTACTS secret if set.'
        required: false
        default: ''

  # Automatically trigger on pull requests
  # pull_request:
  #   branches:
  #     - master
  #     - main

  # Trigger on push to specified branches
  # push:
  #   branches:
  #     - master
  #     - main

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Combine notification contacts
        id: notification_contacts
        shell: bash
        run: |
          SECRET_CONTACTS="${{ secrets.SAVANT_NOTIFICATION_CONTACTS }}"
          INPUT_CONTACTS="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.notification_contacts || '' }}"
          
          # Combine contacts if both exist, otherwise use whichever is available
          if [ -n "$SECRET_CONTACTS" ] && [ -n "$INPUT_CONTACTS" ]; then
            COMBINED_CONTACTS="${SECRET_CONTACTS}, ${INPUT_CONTACTS}"
          elif [ -n "$SECRET_CONTACTS" ]; then
            COMBINED_CONTACTS="$SECRET_CONTACTS"
          elif [ -n "$INPUT_CONTACTS" ]; then
            COMBINED_CONTACTS="$INPUT_CONTACTS"
          else
            COMBINED_CONTACTS=""
          fi
          
          echo "contacts=$COMBINED_CONTACTS" >> $GITHUB_OUTPUT
          echo "Combined notification contacts: $COMBINED_CONTACTS"
      
      - name: Create Savant.Chat audit request
        uses: auditdbio/savant-smart-contract-analyzer@v1.4
        with:
          base_commit: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.base_commit || github.event_name == 'push' && github.event.before || github.event.pull_request.base.sha }}
          head_commit: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.head_commit || github.event_name == 'push' && github.sha || github.event.pull_request.head.sha }}
          api_token: ${{ secrets.SAVANT_API_TOKEN }}
          dry_run: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run || 'false' }}
          tier: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tier || 'advanced' }}
          notification_contacts: ${{ steps.notification_contacts.outputs.contacts }}

